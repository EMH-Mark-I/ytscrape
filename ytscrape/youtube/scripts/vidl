#Move to data/ directory and set variables.
	cd data/
	vlocation=$(cat options | grep "1:" | sed 's/1: //')
	mlocation=$(cat options | grep "2:" | sed 's/2: //')
	quality=$(cat options | grep "3:" | sed 's/3: //')

#Pseudo loop for detecting variable $quality data. It will exit the script if it detects an invalid pattern.
#DASH videos won't always work in mpv, so this is why the options are limited. You can add your own if you want to expand the range.
	if [[ $quality = "180p" ]];
	then
		dlquality="--ytdl-format=36+139"
			
	elif [[ $quality = "360p" ]];
	then
		dlquality="--ytdl-format=18+140"
			
	elif [[ $quality = "720p" ]];
	then
		dlquality="--ytdl-format=22+140"

	elif [[ $quality = "best" ]];
	then
		dlquality="--ytdl-format=best"
		
	else
		echo "Invalid option in streaming quality settings!"
		sleep 2s
		echo "Please insert a valid option.
		"
		sleep 2s
		nano options
		exit 0
	fi
	
ytquality=$(echo $dlquality | cut -d= -f2)

#Setup loop for user input.
while true; do
	clear
#Grep for time info
	bash options2

#Organize layout by time.
	bash options3

#Build list
	bash options4

#Show the timestamp.
	cat list timestamp

#Display input options
echo "
Choose an option by entering it's number located in brackets [n].
[1] Download video
[2] Stream video now
[3] Download as MP3
[4] Open video in browser
[l] Change list layout
[i] Display video info
[o] Options
[b] Back
"

	read -p "Enter an option: " ans2

#Download video
if test "$ans2" = "1" ;
then
	read -p "Input the number of a URL from the list:	" ans
	clear
	URL=$(grep 'URL' vidl_URL2 | rev | cut -d "=" -f1 | rev | sed "$ans q;d" | sed 's|^|https://www.youtube.com/watch?v=|')
	youtube-dl -f $ytquality $URL -o $vlocation
	notify-send "YouTube-dl action is finished."
fi

#Stream video
if test "$ans2" = "2" ;
then
	read -p "Input the number of a URL from the list:	" ans
	clear
	URL=$(grep 'URL' vidl_URL2 | rev | cut -d "=" -f1 | rev | sed "$ans q;d" | sed 's|^|https://www.youtube.com/watch?v=|')
	display=$(cat options | grep "4:" | sed 's/4: //')
	mpv $display $dlquality $URL
fi

#Download as MP3
if test "$ans2" = "3" ;
then
	read -p "Input the number of a URL from the list:	" ans
	clear
	URL=$(grep 'URL' vidl_URL2 | rev | cut -d "=" -f1 | rev | sed "$ans q;d" | sed 's|^|https://www.youtube.com/watch?v=|')
	youtube-dl --extract-audio --audio-format mp3 $URL -o $mlocation
	notify-send "YouTube-dl action is finished."
fi

#Open video in browser
if test "$ans2" = "4" ;
then
	read -p "Input the number of a URL from the list:	" ans
	clear
	URL=$(grep 'URL' vidl_URL2 | rev | cut -d "=" -f1 | rev | sed "$ans q;d" | sed 's|^|https://hooktube.com/watch?v=|')
	xdg-open $URL &>/dev/null & disown
fi

#Change list layout
if test "$ans2" = "l" ;
then
	nano options3
fi

#Display video info
if test "$ans2" = "i" ;
then
	read -p "Input the number of a URL from the list:	" ans
	clear
	URL=$(grep 'URL' vidl_URL2 | rev | cut -d "=" -f1 | rev | sed "$ans q;d" | sed 's|^|https://www.youtube.com/watch?v=|') &&
	cd ../store &&
	wget -O $ans-info_file $URL &&
	clear
	echo "[$ans-URL]" > ../data/$ans-info_file
	grep -m1 /title $ans-info_file | sed 's|<title>|[Title: |g' | sed 's|</title>.*||g' | sed 's|- YouTube|]\n|g' | sed 's/%21/!/g' | sed 's/%3A/:/g' | sed 's/%3F/?/g' | sed 's/%3D/=/g'| sed 's/%26/\&/g' | sed 's/\&quot;/"/g' | sed 's/\&amp;/\&/g' | sed "s/\&#39;/'/g" >> ../data/$ans-info_file
	grep "eow-description" $ans-info_file | sed 's|.*eow-description" class="" >||g' | sed 's|</div>  <div id="watch-description-extras">||g' | sed 's|<br />|\n|g' | sed 's|%21|!|g' | sed 's|%3A|:|g' | sed 's|%3F|?|g' | sed 's|%3D|=|g'| sed 's|%26|\&|g' | sed 's|</a>||g' | sed 's|</p>||g' | sed 's|%2F|/|g' | sed 's|nofollow.*||g' | sed 's|" data-sessionlink.*...||g'| sed s'|<a href.*https|https|g' | sed s'|<a href.*http|http|g' | sed 's|&amp.*||g' | sed 's|" class.*||g' | sed 's|" target.*||g' | sed 's|" rel.*||g' | sed s'|<a href.*false;">||g' >> ../data/$ans-info_file
	cat ../data/$ans-info_file
	read -s -n 1 -p "Press any key to continue..."
	rm $ans-info_file ../data/$ans-info_file
	cd ../data
fi

#Options
if test "$ans2" = "o" ;
then
	nano options
	clear
	echo "Reloading settings."
	sleep 2s
	exec "$ScriptLoc"
fi

#Back
if test "$ans2" = "b" ;
then
	break
fi

done
