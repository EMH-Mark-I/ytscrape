#Move to data/ directory and set variables.
	cd data/
	vlocation=$(cat options | grep "1:" | sed 's/1: //')
	mlocation=$(cat options | grep "2:" | sed 's/2: //')
	quality=$(cat options | grep "3:" | sed 's/3: //')

#Pseudo loop for detecting variable $quality data. It will exit the script if it detects an invalid pattern.
#DASH videos won't always work in mpv, so this is why the options are limited. You can add your own if you want to expand the range.
	if [[ $quality = "180p" ]];
	then
		dlquality="--ytdl-format=17+160"
			
	elif [[ $quality = "360p" ]];
	then
		dlquality="--ytdl-format=18+134"
			
	elif [[ $quality = "720p" ]];
	then
		dlquality="--ytdl-format=22+136"

	elif [[ $quality = "best" ]];
	then
		dlquality="--ytdl-format=best"
		
	else
		echo "Invalid option in streaming quality settings!"
		sleep 2s
		echo "Please insert a valid option.
		"
		sleep 2s
		nano +10 options
		exit 0
	fi

ytquality=$(echo $dlquality | cut -d= -f2)

#Setup loop for user input.
while true; do
	clear
	cat list timestamp

#Display input options
echo "
Choose an option by entering its reference seen in the brackets [n].

[1] Download video
[2] Stream video now
[3] Download as MP3
[4] Open video in browser
[l] Change list layout
[i] Display video info
[o] Options
[b] Back
"

	read -p "Enter an option: " ans2

#Download video
if test "$ans2" = "1" ;
then
	. ../scripts/vidl_download
fi

#Stream video
if test "$ans2" = "2" ;
then
	. ../scripts/vidl_stream
fi

#Download as MP3
if test "$ans2" = "3" ;
then
	. ../scripts/vidl_dlmp3
fi

#Open video in browser
if test "$ans2" = "4" ;
then
	read -p "Input the URL reference number seen from the list:	" ans

	#Check answer
	if [ "$ans" = "q" -o "$ans" = "Q" ];
	then
		echo "Exit"
	else
		clear
		URL=$(grep 'URL' vidl_URL2 | rev | cut -d "=" -f1 | rev | sed "$ans q;d" | sed 's|^|https://hooktube.com/watch?v=|')
		xdg-open $URL &>/dev/null & disown
	fi
fi

#Change list layout
if test "$ans2" = "l" ;
then
	nano options3
	#Grep for time info
	bash options2
	#Organize layout by time.
	bash options3
	#Build list
	bash options4
fi

#Display video info
if test "$ans2" = "i" ;
then
	bash ../scripts/vidinfo
fi

#Options
if test "$ans2" = "o" ;
then
	nano options
	clear
	echo "Reloading settings."
	sleep 2s
	break
fi

#Back
if test "$ans2" = "b" ;
then
	break
fi

done
